{"version":3,"sources":["comps/comp1.js","comps/comp2.js","comps/comp3.js","comps/comp4.js","App.js","serviceWorker.js","index.js"],"names":["Comp1","state","handleDelete","id","temp","data","flag","setState","date","Fragment","this","props","mails","map","item","index","key","Avatar","alt","src","pic","name","title","content","onClick","Component","Comp2","Comp3","Comp4","App","comps","Comp","location","status","handleChange","handleStatus","drawer","style","width","textAlign","IconButton","Divider","List","text","ListItem","button","ListItemIcon","ListItemText","primary","AppBar","position","Toolbar","color","aria-label","edge","Typography","variant","noWrap","Drawer","open","React","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bbc76bc6.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nclass Comp1 extends Component {\n  state = {};\n\n  handleDelete = id => {\n    let temp = this.state.data;\n    temp[id].flag = !temp[id].flag;\n    this.setState({ date: temp });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.props.mails.map((item, index) => {\n            return (\n              <div key={index}>\n                <td>\n                  <Avatar alt=\"Remy Sharp\" src={`./images/${item.pic}`} />\n                </td>\n                <td>Sender: {item.name}</td>\n                <br />\n                <td>Title: {item.title}</td>\n                <br />\n                <td>Content: {item.content}</td>\n                <br />\n                <button onClick={() => this.handleDelete(index)}>delete</button>\n                <br></br>\n                <br></br>\n              </div>\n            );\n        })}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Comp1;\n","import React, { Component, Fragment } from \"react\";\n\nclass Comp2 extends Component {\n  state = {};\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1>comp2</h1>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Comp2;\n","import React, { Component, Fragment } from \"react\";\n\nclass Comp3 extends Component {\n  state = {};\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1>comp3</h1>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Comp3;\n","import React, { Component, Fragment } from \"react\";\n\nclass Comp4 extends Component {\n  state = {};\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1>comp4</h1>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Comp4;\n","import React from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MailIcon from '@material-ui/icons/Mail';\nimport Comp1 from \"./comps/comp1\";\nimport Comp2 from \"./comps/comp2\";\nimport Comp3 from \"./comps/comp3\";\nimport Comp4 from \"./comps/comp4\";\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\n\n\nexport default class App extends React.Component {\n  state = {\n    comps: [\n      {\n        index: 1,\n        Comp: <Comp1/>\n      },\n      {\n        index: 2,\n        Comp: <Comp2/>\n      },\n      {\n        index: 3,\n        Comp: <Comp3/>\n      },\n      {\n        index: 4,\n        Comp: <Comp4/>\n      }\n    ],\n    data:[\n      {\n        id: 0,\n        name: \"Mohammad\",\n        title: \"Hey\",\n        content: \"We will have a night meeting today\",\n        pic: \"Habeeb.png\",\n        location: \"Inbox\"\n      },\n      {\n        id: 1,\n        name: \"Loader\",\n        title: \"Accepted\",\n        content: \"okay i'm in\",\n        pic: \"Ahmad.png\",\n        location: \"Inbox\"\n      },\n      {\n        id: 2,\n        name: \"Ahmed\",\n        title: \"Slepping\",\n        content: \"nahh i will be sleeping. feel free to fire me\",\n        pic: \"Ali.png\",\n        location: \"Inbox\"\n      }\n    ],\n    status: false,\n    index: 1\n  };\n\n  handleDelete = id => {\n    let temp = this.state.data;\n    temp[id].location = \"Delete\";\n    this.setState({ date: temp });\n  };\n\n  handleChange = index => {\n    this.setState({ index: index})\n  };\n\n  handleStatus=()=>{\n    this.setState({status: !this.state.status})\n  };\n\n  render(){\n\n    const drawer = (\n      <div >\n        <div style={{width: 150, textAlign:\"right\"}}>\n          <IconButton onClick={this.handleStatus}>\n              <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        \n        <Divider />\n        <List>\n          {['Index', 'Trash', 'comp3', 'comp4'].map((text, index) => (\n            <ListItem button onClick={() => this.handleChange(index+1)} key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n\n    return (\n      <div>\n          <AppBar\n        position=\"fixed\"\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={this.handleStatus}\n            edge=\"start\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Persistent drawer\n          </Typography>\n        </Toolbar>\n      </AppBar>\n        \n        <Drawer\n              variant=\"persistent\"\n              open={this.state.status}\n            >\n            {drawer}\n        </Drawer>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}